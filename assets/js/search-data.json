{
  
    
        "post0": {
            "title": "Adding Google Analytics to a Django App",
            "content": "Google Analytics is the most popular solution to monitor and analyze web traffic. It provides detailed information about users visiting your website or web app - both historically and in real-time. . Here, use the new Google Analytics GA4 to create a &quot;Google Analytics property&quot; for monitoring analyzing the traffic on a Django web app. As simple example app, I build on the previously described Django &quot;Hello World&quot; app. . The final Django app is deployed on Heroku and available here. The final code is in this this GitHub repository. . Requirements . A Django web app. This post builds on the Django &quot;Hello World&quot; app described in this post. Release v1.1.0 belongs to this blog post. | . | A Google account you can use for Google Analytics. It&#39;s free. | . Creating the Google Analytics GA4 Property . Go to the Google Analytics dashboard and log in if requested. To monitor a new Django app, create a new Google Analytics property by navigating to Admin &gt; + Create Property. . . Fill in the fields, selecting a property name, region, currency, and information regarding the monitored Django app. . . Once the new property is created, select Data Streams &gt; Web to set up a new data stream for the Django web app. Paste the URL of the Django app: . . Adding Google Analytics to the Django App . Get the code snippet from the created Google Analytics data stream from the created data stream site under Tagging Instructions &gt; Add new on-page tag &gt; Global Site Tag (gtag.js). The snippet should look like this (of course with the real tag ID instead of YOURTAGID): . &lt;!-- Global site tag (gtag.js) - Google Analytics --&gt; &lt;script async src=&quot;https://www.googletagmanager.com/gtag/js?id=YOURTAGID&quot;&gt;&lt;/script&gt; &lt;script&gt; window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag(&#39;js&#39;, new Date()); gtag(&#39;config&#39;, &#39;YOURTAGID&#39;); &lt;/script&gt; . Copy the code snippet and paste it inside the Django app&#39;s main/base template. In case of my &quot;Hello World&quot; app, there is just a single template, which looks like this: . &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Hello World&lt;/title&gt; &lt;!-- Global site tag (gtag.js) - Google Analytics --&gt; &lt;script async src=&quot;https://www.googletagmanager.com/gtag/js?id=MYTAGID&quot;&gt;&lt;/script&gt; &lt;script&gt; window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag(&#39;js&#39;, new Date()); gtag(&#39;config&#39;, &#39;MYTAGID&#39;); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; Hello World! &lt;/body&gt; &lt;/html&gt; . Save, commit, push, and deploy. Google Analytics will likely only work on the deployed app in production. . To validate that it works, open the Django app in Chrome and open developer tools. Opening Application &gt; Cookies should show that the Django app now has cookies used for Google Analytics: . . Opening the Google Analytics realtime dashboard should show that there is a visitor (this may take a few seconds): . . Note: Firefox may block Google Analytics or send &quot;Do-Not-Track&quot; Signals such that visiting the Django app is not recognized or shown in the realtime dashboard. For testing, turn off tracking protection or use Chrome. . Adding a Cookie Banner . Using cookies for Google Analytics legally requires informing users of the Django app of these cookies. If the app does not yet have a cookie banner, it&#39;s now time to create one. . I use WebsitePolicies for generating suitable cookie banners. The service is simple and free for non-commercial apps. Simply fill in the questions and the service generates an HTML snippet to copy and paste into the Django app&#39;s base template (similar to the GA4 tag). . The updated web page should show a cookie banner similar to this: . . What Next? . Django Hello World GitHub Repository | Previous post: Building a Django App and Deploying It on Heroku | Migrating an existing Google Analytics universal property to the new GA4 (Guide by Google) | Other blog posts related to Django | .",
            "url": "https://stefanbschneider.github.io/blog/django/google%20analytics/2021/01/21/django-google-analytics.html",
            "relUrl": "/django/google%20analytics/2021/01/21/django-google-analytics.html",
            "date": " • Jan 21, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Building a Django App and Deploying It on Heroku",
            "content": "In this guide, I show how to setup a simple Django web app that says &quot;Hello World!&quot; and how to deploy it on Heroku through GitHub. The process is simple enough, but I still kept running into errors when deploying new Django apps, so I thought to finally just write it down step-by-step. . Requirements . For that, Heroku and GitHub accounts are required. Both are free. . All code should be in a GitHub repository. For reference, this is my GitHub repository: https://github.com/stefanbschneider/django-hello-world The steps described here belong to release v1.0.0. . Django &quot;Hello World&quot; App . Initial Setup . Install Django: . pip install django . Create a new Django project (inside the GitHub repository): . django-admin startproject myproject . A project can consist of multiple apps. Create a new Django helloworld app inside the myproject project: . cd myproject python manage.py startapp helloworld . Run the dev server: . python manage.py runserver . Go to http://localhost:8000/ in the browser. This should confirm the successful initial setup: . . Create the &quot;Hello World&quot; App . Link the helloworld app to the project by adding . &#39;helloworld.apps.HelloworldConfig&#39;, . to the INSTALLED_APPS inside myproject/settings.py. . Create a new HTML-template index.html inside helloworld/templates/helloworld (also create these folders): . &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Hello World&lt;/title&gt; &lt;/head&gt; &lt;body&gt; Hello World! &lt;/body&gt; &lt;/html&gt; . Create helloworld/urls.py to configure a URL path showing the new template: . from django.urls import path from django.views.generic import TemplateView urlpatterns = [ path(&#39;&#39;, TemplateView.as_view(template_name=&#39;helloworld/index.html&#39;), name=&#39;index&#39;), ] . Finally, link to the helloworld URLs from the project&#39;s myproject/urls.py: . from django.contrib import admin from django.urls import path, include urlpatterns = [ path(&#39;&#39;, include(&#39;helloworld.urls&#39;)), path(&#39;admin/&#39;, admin.site.urls), ] . Now, http://localhost:8000/ should show the dummy &quot;hello world&quot; message: . . Deploying the App on Heroku . Creating a New App on Heroku . To create a new app on Heroku, I log into the Heroku dashboard and select New &gt; Create new app. For the new app, any unique name is ok (I chose django-hello-world-app). . . Note: The name of your Heroku app will also determine its URL, which is &lt;app-name&gt;.herokuapp.com. It can still be changed in the settings later. Next, I select my GitHub repository as deployment method inside Heroku (this may require authorization using GitHub credentials): . . Finally, I have to set some configuration variables (= environmental variables) inside Heroku: Settings &gt; Config Vars &gt; Reveal Config Vars. . Set DJANGO_SETTINGS_MODULE to myproject.prod_settings, which is are the settings for production deployment, created later. | Set DJANGO_SECRET_KEY to a randomly generated secret key that is used for deployment. This key must not be commited to the GitHub repository. | . . Preparing Deployment . Before the actual deployment on Heroku, a few additional steps are required. . Currently, the generated folder structure should look like this: . myproject/ helloworld/ myproject/ manage.py . For deployment on Heroku, move everything into the top-level folder such that manage.py is in the project root and there is no more top-level myproject directory: . helloworld/ myproject/ manage.py . The Procfile indicates how to deploy and serve the web app, here with gunicorn: . release: python manage.py migrate --no-input web: gunicorn myproject.wsgi . Accordingly, the dependencies of this &quot;hello world&quot; app are (saved in requirements.txt): . django django-heroku gunicorn . Heroku needs django-heroku for proper deployment (see Heroku docs). . Specify the root path for static files by appending to the myproject/settings.py (also import os): . # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/3.1/howto/static-files/ STATIC_URL = &#39;/static/&#39; # path to where static files are copied for deployment (eg, for heroku) STATIC_ROOT = os.path.join(BASE_DIR, &#39;staticfiles&#39;) # location of static files in local development: https://learndjango.com/tutorials/django-favicon-tutorial # not needed yet, only once adding static files (eg, images) # STATICFILES_DIRS = [os.path.join(BASE_DIR, &#39;static&#39;),] . Create myproject/prod_settings.py with additional settings for production deployment: . &quot;&quot;&quot; Production Settings &quot;&quot;&quot; # default: use settings from main settings.py if not overwritten from .settings import * import django_heroku DEBUG = False SECRET_KEY = os.getenv(&#39;DJANGO_SECRET_KEY&#39;, SECRET_KEY) # adjust to the URL of your Heroku app ALLOWED_HOSTS = [&#39;django-hello-world-app.herokuapp.com&#39;] # Activate Django-Heroku. django_heroku.settings(locals()) . Commit and push everything to the repository&#39;s main branch. . Automated Deployment via GitHub . To test the deployment, go to the Heroku dashboard Deploy &gt; Manual deploy, select the main branch and deploy. After the build and deployment succeeds, click Open app to open &lt;app-name&gt;.herokuapp.com, which should show &quot;Hello World&quot;. Deployment successful! . Finally, enable automatic deploys at Deploy &gt; Automatic deploys &gt; Enable such that the latest version of the Django app is build and deployed automatically with every push to the main branch. . Note: Heroku&#8217;s free dynos are free but power off if they are unused. So loading a deployed app that hasn&#8217;t been used in a while may take multiple seconds. . What Next? . Small example apps I built with Django and deployed on Heroku: . Quotify: An example app showing inspirational quotes. [Code] [App] | Ideally: Organize &amp; Grow Your Ideas. [Code] [App] | FeelYa: The app that gets you! [Code] [App] | . Other blog posts: . Posts related to Django | Posts related to Heroku | .",
            "url": "https://stefanbschneider.github.io/blog/django/heroku/github/deployment/2021/01/19/django-heroku.html",
            "relUrl": "/django/heroku/github/deployment/2021/01/19/django-heroku.html",
            "date": " • Jan 19, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Getting Started with PyTorch",
            "content": ". Note: Code from the official PyTorch 60-min-blitz tutorial. . Loading the CIFAR10 Dataset . import torch import torchvision import torchvision.transforms as transforms . . transform = transforms.Compose( [transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]) trainset = torchvision.datasets.CIFAR10(root=&#39;./data&#39;, train=True, download=True, transform=transform) trainloader = torch.utils.data.DataLoader(trainset, batch_size=4, shuffle=True, num_workers=2) testset = torchvision.datasets.CIFAR10(root=&#39;./data&#39;, train=False, download=True, transform=transform) testloader = torch.utils.data.DataLoader(testset, batch_size=4, shuffle=False, num_workers=2) classes = (&#39;plane&#39;, &#39;car&#39;, &#39;bird&#39;, &#39;cat&#39;, &#39;deer&#39;, &#39;dog&#39;, &#39;frog&#39;, &#39;horse&#39;, &#39;ship&#39;, &#39;truck&#39;) . Files already downloaded and verified Files already downloaded and verified . import matplotlib.pyplot as plt import numpy as np # functions to show an image def imshow(img): img = img / 2 + 0.5 # unnormalize npimg = img.numpy() plt.imshow(np.transpose(npimg, (1, 2, 0))) plt.show() # get some random training images dataiter = iter(trainloader) images, labels = dataiter.next() # show images imshow(torchvision.utils.make_grid(images)) # print labels print(&#39; &#39;.join(&#39;%5s&#39; % classes[labels[j]] for j in range(4))) . . ship frog truck bird . Building a CNN Model with PyTorch . Architecture: . Input: 32x32-pixel images with 3 channels (RGB) &rarr; 3x32x32 images | Convolutions with 3 input channels, 6 output channels, and 5x5 square convolution &rarr; 6x28x28 images | 2x2 max pooling (subsampling) &rarr; 6x14x14 images | 6 input channels (from the previous Conv2d layer), 16 output channels, 5x5 square convolutions &rarr; 16x10x10 images | 2x2 max pooling (subsampling) &rarr; 16x5x5 images | Fully connected linear (=dense) layer with 16x5x5=400 input size and 120 output; ReLU activation | Fully connected layer with 120 input and 84 output; ReLU activation | Fully connected output layer with 84 input and 10 output (for the 10 classes in the CIFAR10 dataset); no/linear activation | . Note that the layers are defined in the constructor and the activations applied in the forward function. . To calculate the output size of a convolutional layer, use this formula: . $ frac{W−K+2P}{S} +1$ with input size $W$ (width and height for square images), convolution size $K$, padding $P$ (default 0), and stride $S$ (default 1). . Further explanation on layer sizes: Medium article by Jake Krajewski . import torch.nn as nn import torch.nn.functional as F class Net(nn.Module): def __init__(self): super(Net, self).__init__() self.conv1 = nn.Conv2d(3, 6, 5) self.pool = nn.MaxPool2d(2, 2) self.conv2 = nn.Conv2d(6, 16, 5) self.fc1 = nn.Linear(16 * 5 * 5, 120) self.fc2 = nn.Linear(120, 84) self.fc3 = nn.Linear(84, 10) def forward(self, x): x = self.pool(F.relu(self.conv1(x))) x = self.pool(F.relu(self.conv2(x))) x = x.view(-1, 16 * 5 * 5) x = F.relu(self.fc1(x)) x = F.relu(self.fc2(x)) x = self.fc3(x) return x net = Net() . Define the loss as cross entropy loss and SGD as optimizer. . import torch.optim as optim criterion = nn.CrossEntropyLoss() optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9) . Training . Over 5 epochs. . for epoch in range(5): # loop over the dataset multiple times running_loss = 0.0 for i, data in enumerate(trainloader, 0): # get the inputs; data is a list of [inputs, labels] inputs, labels = data # zero the parameter gradients optimizer.zero_grad() # forward + backward + optimize outputs = net(inputs) loss = criterion(outputs, labels) loss.backward() optimizer.step() # print statistics running_loss += loss.item() if i % 2000 == 1999: # print every 2000 mini-batches print(&#39;[%d, %5d] loss: %.3f&#39; % (epoch + 1, i + 1, running_loss / 2000)) running_loss = 0.0 print(&#39;Finished Training&#39;) . [1, 2000] loss: 2.200 [1, 4000] loss: 1.837 [1, 6000] loss: 1.695 [1, 8000] loss: 1.587 [1, 10000] loss: 1.534 [1, 12000] loss: 1.469 [2, 2000] loss: 1.391 [2, 4000] loss: 1.377 [2, 6000] loss: 1.361 [2, 8000] loss: 1.332 [2, 10000] loss: 1.306 [2, 12000] loss: 1.297 [3, 2000] loss: 1.227 [3, 4000] loss: 1.220 [3, 6000] loss: 1.202 [3, 8000] loss: 1.217 [3, 10000] loss: 1.180 [3, 12000] loss: 1.187 [4, 2000] loss: 1.093 [4, 4000] loss: 1.094 [4, 6000] loss: 1.141 [4, 8000] loss: 1.109 [4, 10000] loss: 1.127 [4, 12000] loss: 1.125 [5, 2000] loss: 1.033 [5, 4000] loss: 1.047 [5, 6000] loss: 1.039 [5, 8000] loss: 1.072 [5, 10000] loss: 1.039 [5, 12000] loss: 1.061 Finished Training . . Save the trained model locally. . PATH = &#39;./cifar_net.pth&#39; torch.save(net.state_dict(), PATH) . Testing the Trained Model . dataiter = iter(testloader) images, labels = dataiter.next() # print images imshow(torchvision.utils.make_grid(images)) print(&#39;GroundTruth: &#39;, &#39; &#39;.join(&#39;%5s&#39; % classes[labels[j]] for j in range(4))) . GroundTruth: cat ship ship plane . net = Net() net.load_state_dict(torch.load(PATH)) # make predictions outputs = net(images) _, predicted = torch.max(outputs, 1) print(&#39;Predicted: &#39;, &#39; &#39;.join(&#39;%5s&#39; % classes[predicted[j]] for j in range(4))) . Predicted: dog car car plane . correct = 0 total = 0 with torch.no_grad(): for data in testloader: images, labels = data outputs = net(images) _, predicted = torch.max(outputs.data, 1) total += labels.size(0) correct += (predicted == labels).sum().item() print(&#39;Accuracy of the network on the 10000 test images: %d %%&#39; % ( 100 * correct / total)) . Accuracy of the network on the 10000 test images: 60 % . class_correct = list(0. for i in range(10)) class_total = list(0. for i in range(10)) with torch.no_grad(): for data in testloader: images, labels = data outputs = net(images) _, predicted = torch.max(outputs, 1) c = (predicted == labels).squeeze() for i in range(4): label = labels[i] class_correct[label] += c[i].item() class_total[label] += 1 for i in range(10): print(&#39;Accuracy of %5s : %2d %%&#39; % ( classes[i], 100 * class_correct[i] / class_total[i])) . Accuracy of plane : 70 % Accuracy of car : 75 % Accuracy of bird : 44 % Accuracy of cat : 33 % Accuracy of deer : 57 % Accuracy of dog : 56 % Accuracy of frog : 74 % Accuracy of horse : 61 % Accuracy of ship : 59 % Accuracy of truck : 71 % .",
            "url": "https://stefanbschneider.github.io/blog/machine%20learning/pytorch/vision/classification/2020/12/30/pytorch-getting-started.html",
            "relUrl": "/machine%20learning/pytorch/vision/classification/2020/12/30/pytorch-getting-started.html",
            "date": " • Dec 30, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Deploying a PyTorch Model Using Django",
            "content": "We are going build a simple image classification using a pre-trained model in PyTorch. We are then going to deploy the PyTorch model inside a simple web app built with Django. . This is very much related to the guide on deploying PyTorch with Flask. Here, I show an alternative using Django, which is not as light-weight but contains more features built-in than Flask. . Install and Setup Django . Install: . pip install django . Create the project and a Django app: . django-admin startproject pytorch_django cd pytorch_django python manage.py startapp image_classification . Inside settings.py, add &#39;image_classification.apps.ImageClassificationConfig&#39; to the INSTALLED_APPS list. . Start the Django dev server: . python manage.py runserver . Go to localhost:8000: . . Create image_classification/urls.py | Link it from the project&#39;s URL config | Create image upload form and view | . Upload and save the image using data URI instead of saving it to DB/disk: https://stackoverflow.com/a/40568024/2745116 | Showing the uploaded image: https://stackoverflow.com/a/29397661/2745116 | . Heroku Deployment: . Register/Login --&gt; Create new app --&gt; Connect to GitHub (Need GitHub repo!) | Enable automatic deploys | Secrets: DJANGO_SETTINGS_MODULE: project.prod_settings DJANGO_SECRET_KEY: &lt;/li&gt; &lt;/ul&gt; Also prepare prod_settings . add runtime.txt and Procfile | Install whitenoise and add &#39;whitenoise.middleware.WhiteNoiseMiddleware&#39;, to middleware in settings.py for static file serving | . Add to settings.py: . STATIC_URL = &#39;/static/&#39; # path to where static files are copied for deployment (eg, for heroku) STATIC_ROOT = os.path.join(BASE_DIR, &#39;staticfiles&#39;) # location of static files in local development: https://learndjango.com/tutorials/django-favicon-tutorial STATICFILES_DIRS = [os.path.join(BASE_DIR, &#39;static&#39;),] . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; | .",
            "url": "https://stefanbschneider.github.io/blog/machine%20learning/pytorch/vision/classification/django/heroku/deployment/2020/12/30/pytorch-django.html",
            "relUrl": "/machine%20learning/pytorch/vision/classification/django/heroku/deployment/2020/12/30/pytorch-django.html",
            "date": " • Dec 30, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": ". Note: This post was generated by fastpages and kept for reference. . About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://stefanbschneider.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": ". This post was generated by fastpages and kept for reference. Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://stefanbschneider.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "I am a computer science PhD candidate and passionate about learning new things. I use this blog to take notes for myself - and possibly help others. . Contact details and more information about myself are on my website. .",
          "url": "https://stefanbschneider.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://stefanbschneider.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}